generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("NEXT_PUBLIC_MONGODB_URI")
}

model User {
    id        String    @id @default(uuid()) @map("_id")
    username  String    @unique
    password  String
    email     String    @unique
    firstName String
    lastName  String
    rol       Role      @default(viewer)
    avatar    String?
    post      Post[]
    comments  Comment[]
    likes     Like[]
    dislikes  Dislike[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Post {
    id        String    @id @default(uuid()) @map("_id")
    content   String
    images    String[]
    video     String?
    location  String?
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    comments  Comment[]
    likes     Like[]
    dislikes  Dislike[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Comment {
    id        String    @id @default(uuid()) @map("_id")
    content   String
    post      Post      @relation(fields: [postId], references: [id])
    postId    String
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    parent    Comment?  @relation("ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId  String?
    replies   Comment[] @relation("ChildComments")
    likes     Like[]
    dislikes  Dislike[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Like {
    id        String   @id @default(uuid()) @map("_id")
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId String
    post      Post?    @relation(fields: [postId], references: [id])
    postId    String?
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Dislike {
    id        String   @id @default(uuid()) @map("_id")
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId String
    post      Post?    @relation(fields: [postId], references: [id])
    postId    String?
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Coordinates {
    id        String   @id @default(uuid()) @map("_id")
    latitude  Float
    longitude Float
    country   String
    city      String
    state     String
    createdAt DateTime @default(now())
}

model TempPlaybackId {
    id         String   @id @default(uuid()) @map("_id")
    playbackId String
    createAt   DateTime @default(now())
}

enum Role {
    viewer
    streamer
}
